extends base

block main
  section.section
    .row
      .col-lg-12
        .card
          .card-body
            h5.card-title Compare Dataset
            - let longestTanggal = [];

            .row
              // Data Cuaca Attributes
              .col-12.mb-3
                legend.col-form-label.fw-bold Data Cuaca
                if cuaca.length > 0
                  - if (cuaca.length > longestTanggal.length) longestTanggal = cuaca.map((el) => el.tanggal);
                  - const cuaca_attr = ['temperatur_avg', 'kelembaban_avg', 'kecepatan_angin_avg', 'jum_curah_hujan', 'jum_hari_hujan', 'penyinaran_matahari_avg'];
                  each attr in cuaca_attr
                    -
                      const attr_display = attr.replace(/_/g, ' ').replace(/\b\w/g, (char) => char.toUpperCase());
                      const attr_data = cuaca.map((el) => { 
                        const obj = {};
                        obj.tanggal = el.tanggal;
                        obj[attr] = el[attr];
                        return obj;
                      });
                    .form-check.form-check-inline.form-switch
                      input.form-check-input.btn-switch-plot-data(type='checkbox' role='switch' id=attr data-attr-data=`${JSON.stringify(attr_data)}`)
                      label.form-check-label(for=attr)= attr_display
                else
                  p No data
              
              // Data Kecelakaan Attributes
              .col-lg-3.mb-3
                legend.col-form-label.fw-bold Data Kecelakaan
                if kecelakaan.length > 0
                  - if (kecelakaan.length > longestTanggal.length) longestTanggal = kecelakaan.map((el) => el.tanggal);
                  - const kecelakaan_attr = ['jum_kecelakaan'];
                  each attr in kecelakaan_attr
                    -
                      const attr_display = attr.replace(/_/g, ' ').replace(/\b\w/g, (char) => char.toUpperCase());
                      const attr_data = kecelakaan.map((el) => { 
                        const obj = {};
                        obj.tanggal = el.tanggal;
                        obj[attr] = el[attr];
                        return obj;
                      });
                    .form-check.form-check-inline.form-switch
                      input.form-check-input.btn-switch-plot-data(type='checkbox' role='switch' id=attr data-attr-data=`${JSON.stringify(attr_data)}`)
                      label.form-check-label(for=attr)= attr_display
                else
                  p No data

              // Data Wisatawan Attributes
              .col-lg-5.mb-3
                legend.col-form-label.fw-bold Data Wisatawan
                if wisatawan.length > 0
                  - if (wisatawan.length > longestTanggal.length) longestTanggal = wisatawan.map((el) => el.tanggal);
                  - const wisatawan_attr = ['jum_wisnus', 'jum_wisman'];
                  each attr in wisatawan_attr
                    -
                      const attr_display = attr.replace(/_/g, ' ').replace(/\b\w/g, (char) => char.toUpperCase());
                      const attr_data = wisatawan.map((el) => { 
                        const obj = {};
                        obj.tanggal = el.tanggal;
                        obj[attr] = el[attr];
                        return obj;
                      });
                    .form-check.form-check-inline.form-switch
                      input.form-check-input.btn-switch-plot-data(type='checkbox' role='switch' id=attr data-attr-data=`${JSON.stringify(attr_data)}`)
                      label.form-check-label(for=attr)= attr_display
                else
                  p No data
              
              // Tanggal Slider
              .col-12.mb-3
                label.form-label.fw-bold.mb-5(for='tanggal-range') Tanggal Range
                .px-5
                  input#tanggal-range(type='text' data-tanggal-arr=`${JSON.stringify(longestTanggal)}`)
              
              // Analisis Chart
              .col-12
                canvas#chart-analisis.mt-2(style='max-height: 400px;')
            
      if (kecelakaan.length > 0 || wisatawan.length > 0) && clustering_result.length > 0
        -
          const centroids = JSON.parse(clustering.centroids);
          const clusters_name = Object.keys(centroids);
          const criteria_array = JSON.parse(clustering.kriteria_clustering);

        // Relation
        .col-lg-12
          .card
            .card-body
              h5.card-title Relation
              
              .row
                // Criteria Select
                .col-lg-4.mb-3
                  legend.col-form-label.fw-bold Kriteria
                  select#select-criteria.form-select
                    each criteria in criteria_array
                      - const criteria_display = criteria.replace(/_/g, ' ').replace(/\b\w/g, (char) => char.toUpperCase());
                      option(value=criteria)= criteria_display

                // Data Kecelakaan Switch
                .col-lg-3.mb-3
                  legend.col-form-label.fw-bold Data Kecelakaan
                  if kecelakaan.length > 0
                    - const kecelakaan_attr = ['jum_kecelakaan'];
                    each attr in kecelakaan_attr
                      -
                        const attr_display = attr.replace(/_/g, ' ').replace(/\b\w/g, (char) => char.toUpperCase());

                        const formattedClusteringResult = {};
                        clustering_result.forEach((el) => formattedClusteringResult[el.tanggal] = el.cluster);
                        const predictionObj = {};
                        clusters_name.forEach((cn) => {
                          predictionObj[cn] = kecelakaan
                            .filter((el) => cn === formattedClusteringResult[el.tanggal])
                            .map((el) => {
                              const obj = {};
                              obj.tanggal = el.tanggal;
                              obj[attr] = el[attr];
                              return obj;
                            });
                        });
                        const tanggalArr = kecelakaan.map((el) => el.tanggal);

                      .form-check.form-check-inline.form-switch
                        input.form-check-input.btn-switch-cluster-data(type='checkbox' role='switch' id=`prediction-${attr}` name=attr data-prediction-obj=`${JSON.stringify(predictionObj)}` data-prediction-tanggal-arr=`${JSON.stringify(tanggalArr)}`)
                        label.form-check-label(for=`prediction-${attr}`)= attr_display
                  else
                    p No data

                // Data Wisatawan Switch
                .col-lg-5.mb-3
                  legend.col-form-label.fw-bold Data Wisatawan
                  if wisatawan.length > 0
                    - const wisatawan_attr = ['jum_wisnus', 'jum_wisman'];
                    each attr in wisatawan_attr
                      -
                        const attr_display = attr.replace(/_/g, ' ').replace(/\b\w/g, (char) => char.toUpperCase());

                        const formattedClusteringResult = {};
                        clustering_result.forEach((el) => formattedClusteringResult[el.tanggal] = el.cluster);
                        const predictionObj = {};
                        clusters_name.forEach((cn) => {
                          predictionObj[cn] = wisatawan
                            .filter((el) => cn === formattedClusteringResult[el.tanggal])
                            .map((el) => {
                              const obj = {};
                              obj.tanggal = el.tanggal;
                              obj[attr] = el[attr];
                              return obj;
                            });
                        });
                        const tanggalArr = wisatawan.map((el) => el.tanggal);

                      .form-check.form-check-inline.form-switch
                        input.form-check-input.btn-switch-cluster-data(type='checkbox' role='switch' id=`prediction-${attr}` name=attr data-prediction-obj=`${JSON.stringify(predictionObj)}` data-prediction-tanggal-arr=`${JSON.stringify(tanggalArr)}`)
                        label.form-check-label(for=`prediction-${attr}`)= attr_display
                  else
                    p No data
                
              // Cluster Chart
              #accordion-cluster-chart.accordion.mb-3
                .accordion-item
                  h2#heading.accordion-header
                    button.accordion-button.collapsed(type='button' data-bs-toggle='collapse' data-bs-target='#collapse-accordion-cluster-chart' aria-expanded='false' aria-controls='collapse-accordion')
                      | Cluster Chart
                  #collapse-accordion-cluster-chart.accordion-collapse.collapse(aria-labelledby='heading' data-bs-parent='#accordion-cluster-chart')
                    .accordion-body
                      canvas#chart-cluster(style='max-height: 400px;')

              // Relation Charts
              #accordion-prediction-chart.accordion.mb-3
                .accordion-item
                  h2#heading.accordion-header
                    button.accordion-button.collapsed(type='button' data-bs-toggle='collapse' data-bs-target='#collapse-accordion-prediction-chart' aria-expanded='false' aria-controls='collapse-accordion')
                      | Relation Chart
                  #collapse-accordion-prediction-chart.accordion-collapse.collapse(aria-labelledby='heading' data-bs-parent='#accordion-prediction-chart')
                    .accordion-body.row
                      // Criteria Chart
                      .col-md-6
                        canvas#chart-criteria(style='max-height: 400px;' data-centroids=clustering.centroids data-clusters-name=`${JSON.stringify(clusters_name)}`)
                      // Comparison Chart
                      .col-md-6
                        canvas#chart-comparison(style='max-height: 400px;')
                      // Relation
                      .col-12
                        h6.mt-2.text-center= 'Relation: '
                          span#relation-value -
                            //- span.badge.bg-success true
                            //- span.badge.bg-danger false
      // End if    