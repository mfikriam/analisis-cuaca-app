extends base

block main
  section.section
    .row
      // Clustering Form
      .col-lg-12
        .card
          .card-body
            h5.card-title K-Means Clustering
            form.row(id='form-add-clustering' novalidate)
              .col-12
                input#add-user_id(type='hidden' name='user_id' value=local_user.id)

              .col-md-3.mb-3
                label.form-label(for='jum_cluster') Jumlah Cluster
                input#add-jum_cluster.form-control(type='number' name='jum_kecelakaan' min='2' value=`${(clustering) ? clustering.jum_cluster : ''}` required)
                .invalid-feedback Jumlah cluster minimum 2

              .col-md-3.mb-3
                label.form-label(for='jum_percobaan') Jumlah Percobaan
                input#add-jum_percobaan.form-control(type='number' name='jum_percobaan' min='1' value=`${(clustering) ? clustering.jum_percobaan : '10'}` required)
                .invalid-feedback Jumlah percobaan minimum 1

              .col-12.mb-3
                - const criteria_array = clustering ? JSON.parse(clustering.kriteria_clustering) : [];
                  
                legend.col-form-label Pilih Kriteria

                .form-check.form-check-inline
                  if criteria_array.includes('temperatur_avg')
                    input.form-check-input(type='checkbox' id='criteria-1' value='temperatur_avg' checked)
                  else
                    input.form-check-input(type='checkbox' id='criteria-1' value='temperatur_avg')
                  label.form-check-label(for='criteria-1') Temperatur Avg

                .form-check.form-check-inline
                  if criteria_array.includes('kelembaban_avg')
                    input.form-check-input(type='checkbox' id='criteria-2' value='kelembaban_avg' checked)
                  else
                    input.form-check-input(type='checkbox' id='criteria-2' value='kelembaban_avg')
                  label.form-check-label(for='criteria-2') Kelembaban Avg

                .form-check.form-check-inline
                  if criteria_array.includes('kecepatan_angin_avg')
                    input.form-check-input(type='checkbox' id='criteria-3' value='kecepatan_angin_avg' checked)
                  else
                    input.form-check-input(type='checkbox' id='criteria-3' value='kecepatan_angin_avg')
                  label.form-check-label(for='criteria-3') Kecepatan Angin Avg

                .form-check.form-check-inline
                  if criteria_array.includes('jum_curah_hujan')
                    input.form-check-input(type='checkbox' id='criteria-4' value='jum_curah_hujan' checked)
                  else
                    input.form-check-input(type='checkbox' id='criteria-4' value='jum_curah_hujan')
                  label.form-check-label(for='criteria-4') Jum Curah Hujan

                .form-check.form-check-inline
                  if criteria_array.includes('jum_hari_hujan')
                    input.form-check-input(type='checkbox' id='criteria-5' value='jum_hari_hujan' checked)
                  else
                    input.form-check-input(type='checkbox' id='criteria-5' value='jum_hari_hujan')
                  label.form-check-label(for='criteria-5') Jum Hari Hujan

                .form-check.form-check-inline
                  if criteria_array.includes('penyinaran_matahari_avg')
                    input.form-check-input(type='checkbox' id='criteria-6' value='penyinaran_matahari_avg' checked)
                  else
                    input.form-check-input(type='checkbox' id='criteria-6' value='penyinaran_matahari_avg')
                  label.form-check-label(for='criteria-6') Penyinaran Matahari Avg

              .col-12.mb-3
                button.btn.btn-primary(type='submit') Clustering

    if clustering_result.length > 0
      -
        const centroids = JSON.parse(clustering.centroids);
        const clusters_name = Object.keys(centroids);
        const clusters_arr = clustering_result.map((el) => el.cluster);

        const formatted_clustering_result = clustering_result.map((cr) => {
          const obj = {};
          criteria_array.forEach((crit) => {
            obj.tanggal = cr.cuaca.tanggal;
            obj[crit] = cr.cuaca[crit]
          });
          obj.cluster = cr.cluster;
          return obj;
        });

        let selected_index;
      .row
        // Table Clustering Result
        .col-lg-12
          .card
            .card-body
              h5.card-title Clustering Result
              .mb-2.d-flex.justify-content-end
                button.btn.btn-sm.btn-danger.me-2(type='button' data-bs-toggle='modal' data-bs-target='#modal-del-all-clustering-result')
                  i.bi.bi-archive.me-1
                  |  Delete Clustering Result
              .table-responsive
                table.table.table-hover.datatable(id='clustering-result-table')
                  thead
                    tr
                      th.text-center tanggal
                      th.text-center cluster
                      each criteria in criteria_array
                        th.text-center= criteria
                  tbody
                    each obj in clustering_result
                      tr
                        td.text-end= obj.cuaca.tanggal
                        td.text-end= obj.cluster
                        each criteria in criteria_array
                          td.text-end= obj.cuaca[criteria]
              // End Table with stripped rows

        // Performance Details
        .col-lg-6
          .card
            .card-body
              h5.card-title Performance
              .table-responsive
                table.table.table-borderless
                  tbody
                    tr
                      td Inertia
                      td :
                      td= clustering.inertia.toFixed(2)
                    tr
                      td Num of Iterations
                      td :
                      td= clustering.num_of_iterations

        // Clusters Count
        .col-lg-6
          .card
            .card-body
              h5.card-title Clusters Count
              canvas#chart-clusters-count(style='max-height: 300px;' data-clusters-arr=`${JSON.stringify(clusters_arr)}` data-clusters-name=`${JSON.stringify(clusters_name)}`)
              h6.mt-2.text-center= `Total: ${clustering_result.length}`

        // Centroids
        .col-lg-12
          .card
            .card-body
              h5.card-title Centroids
              canvas#chart-centroids(style='max-height: 400px;' data-centroids=clustering.centroids data-criteria=clustering.kriteria_clustering data-clusters-name=`${JSON.stringify(clusters_name)}`)

        // Clustering Result Visualization
        .col-lg-12
          .card
            .card-body
              h5.card-title Clustering Result Visualization

              .row
                .col-md-5
                  .row.mb-3.align-items-center
                    label.col-md-auto.form-label.fw-semibold(for='cr-criteria-1') Kriteria 1:
                    .col-md-auto
                      select#cr-criteria-1.form-select(name='cr-criteria-1')
                        - selected_index = 0;
                        each criteria, index in criteria_array
                          - const criteria_display = criteria.replace(/_/g, ' ').replace(/\b\w/g, (char) => char.toUpperCase());
                          if index === selected_index
                            option(value=criteria selected)= criteria_display
                          else
                            option(value=criteria)= criteria_display
                .col-md-5
                  .row.mb-3.align-items-center
                    label.col-md-auto.form-label.fw-semibold(for='cr-criteria-2') Kriteria 2:
                    .col-md-auto
                      select#cr-criteria-2.form-select(name='cr-criteria-2')
                        -
                          if (criteria_array.length > 1) selected_index = 1;
                          else selected_index = 0;
                        each criteria, index in criteria_array
                          - const criteria_display = criteria.replace(/_/g, ' ').replace(/\b\w/g, (char) => char.toUpperCase());
                          if index === selected_index
                            option(value=criteria selected)= criteria_display
                          else
                            option(value=criteria)= criteria_display


              canvas#chart-clustering-result(style='max-height: 400px;' data-clustering-result=`${JSON.stringify(formatted_clustering_result)}` data-centroids=clustering.centroids data-clusters-name=`${JSON.stringify(clusters_name)}`)

        // Find Optimal k
        .col-lg-12
          .card
            .card-body
              h5.card-title Find Optimal k

              #accordion.accordion
                .accordion-item
                  h2#heading.accordion-header
                    button.accordion-button.collapsed(type='button' data-bs-toggle='collapse' data-bs-target='#collapse-accordion' aria-expanded='false' aria-controls='collapse-accordion')
                      | Elbow Method
                  #collapse-accordion.accordion-collapse.collapse(aria-labelledby='heading' data-bs-parent='#accordion')
                    .accordion-body.row
                      // Form Elbow Method
                      .col-md-12
                        form(id='form-elbow-method' novalidate)
                          .row.g-3.d-flex.align-items-start
                            label.col-auto.form-label.pt-2(for='max_k') Max k:
                            .col-md-3
                              input#max_k.form-control(type='number' name='max_k' min='3' max=clustering_result.length required)
                              .invalid-feedback= `k ranges value is 3-${clustering_result.length}`
                            .col-auto
                              button.btn.btn-secondary(type='submit') Calculate
                      
                      // Chart Elbow Method
                      .col-md-12.mb-3
                        canvas#chart-elbow-method(style='max-height: 400px;' data-clustering=`${JSON.stringify(clustering)}` data-clustering-result=`${JSON.stringify(formatted_clustering_result)}`)
              //- End of accordion

      //- Delete Clustering Result Modal
      #modal-del-all-clustering-result.modal.fade(data-bs-backdrop='static' data-bs-keyboard='false' tabindex='-1' aria-hidden='true')
        .modal-dialog.modal-dialog-centered
          .modal-content
            .modal-header
              h1.modal-title.fs-4 Delete All Data Confirmation
              button.btn-close(type='button' data-bs-dismiss='modal' aria-label='Close')
            .modal-body= 'Are you sure you want to delete all your clustering result data?'
            .modal-footer
              button.btn.btn-secondary(type='button' data-bs-dismiss='modal') Cancel
              button.btn.btn-danger(class='btn-del-all-clustering-result' type='button' data-user-id=local_user.id) Delete All
    //- End if
